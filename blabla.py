# -*- coding: utf-8 -*-
"""blabla.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbLePIPA6J3vFkAxR32j69SHYuTGzMot
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pickle
import streamlit as st

filePath = 'https://raw.githubusercontent.com/darma09/Tugas/main/heart.csv'
data = pd.read_csv(filePath)

# Displaying the original data
st.write("### Original Dataset")
st.write(data)

data = pd.get_dummies(data, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])

y = data['target']
X = data.drop('target', axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

forest = RandomForestClassifier(n_estimators=20, random_state=12, max_depth=6)
forest.fit(X_train, y_train)

pickle.dump(forest, open('Random_forest_model.pkl', 'wb'))
with open('Random_forest_model.pkl', 'rb') as file:
    load_clf = pickle.load(file)

st.write("""
# Heart Disease Prediction App
Darma Alif Rakhaa

NIM: 210322607280

Universitas Negeri Malang

This app predicts if a patient has a heart disease.

Informasi:
1. Masukkan umur kalian
2. Jenis kelamin kalian (laki-laki atau perempuan)
3. Jenis nyeri dada (angina tipikal, angina atipikal, nyeri non-angina, tanpa gejala)
4. Tekanan darah istirahat (dalam mm Hg)
5. Kolesterol serum (dalam mg/dl)
6. Gula darah puasa > 120 mg/dl (ya atau tidak)
7. Hasil elektrokardiografi istirahat (normal atau abnormal)
8. Detak jantung maksimum yang dicapai (dalam bpm)
9. Angina yang diinduksi oleh latihan (ya atau tidak)
10. Depresi ST yang diinduksi oleh latihan relatif terhadap istirahat (dalam mm)
11. Kemiringan segmen ST puncak latihan (naik, datar, turun)
12. Jumlah pembuluh darah utama yang diwarnai oleh fluoroskopi (0-3)
13. Thalassemia (normal, cacat tetap, cacat reversibel)

Information:
1. Enter your age
2. Enter your gender (male or female)
3. Enter chest pain type (typical angina, atypical angina, non-anginal pain, asymptomatic)
4. Enter resting blood pressure (in mm Hg)
5. Enter serum cholestoral (in mg/dl)
6. Enter fasting blood sugar > 120 mg/dl (yes or no)
7. Enter resting electrocardiographic results (normal or abnormal)
8. Enter maximum heart rate achieved (in bpm)
9. Enter exercise induced angina (yes or no)
10. Enter ST depression induced by exercise relative to rest (in mm)
11. Enter the slope of the peak exercise ST segment (upsloping, flat, downsloping)
12. Enter number of major vessels colored by fluoroscopy (0-3)
13. Enter thalassemia (normal, fixed defect, reversible defect)
""")

st.sidebar.header('User Input Features')

def user_input_features():
    age = st.sidebar.slider('Masukkan umur: ', 0, 120, 25)
    sex = st.sidebar.selectbox('Gender', ('laki-laki', 'perempuan'))
    cp = st.sidebar.selectbox('Jenis nyeri dada', ('angina tipikal', 'angina atipikal', 'nyeri non-angina', 'tanpa gejala'))
    tres = st.sidebar.slider('Tekanan darah istirahat: ', 80, 200, 120)
    chol = st.sidebar.slider('Kolesterol serum dalam mg/dl: ', 100, 600, 200)
    fbs = st.sidebar.selectbox('Gula darah puasa > 120 mg/dl', ('ya', 'tidak'))
    res = st.sidebar.selectbox('Hasil elektrokardiografi istirahat', ('normal', 'abnormal'))
    tha = st.sidebar.slider('Detak jantung maksimum yang dicapai: ', 60, 220, 150)
    exa = st.sidebar.selectbox('Angina yang diinduksi oleh latihan', ('ya', 'tidak'))
    old = st.sidebar.slider('Depresi ST yang diinduksi oleh latihan relatif terhadap istirahat: ', 0.0, 10.0, 1.0)
    slope = st.sidebar.selectbox('Kemiringan segmen ST puncak latihan', ('naik', 'datar', 'turun'))
    ca = st.sidebar.selectbox('Jumlah pembuluh darah utama yang diwarnai oleh fluoroskopi', (0, 1, 2, 3))
    thal = st.sidebar.selectbox('Thalassemia', ('normal', 'cacat tetap', 'cacat reversibel'))

    data = {
        'age': age,
        'sex': 1 if sex == 'perempuan' else 0,
        'cp': {'angina tipikal': 0, 'angina atipikal': 1, 'nyeri non-angina': 2, 'tanpa gejala': 3}[cp],
        'trestbps': tres,
        'chol': chol,
        'fbs': 1 if fbs == 'ya' else 0,
        'restecg': 1 if res == 'normal' else 0,
        'thalach': tha,
        'exang': 1 if exa == 'ya' else 0,
        'oldpeak': old,
        'slope': {'naik': 0, 'datar': 1, 'turun': 2}[slope],
        'ca': ca,
        'thal': {'normal': 0, 'cacat tetap': 1, 'cacat reversibel': 2}[thal]
    }
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

if st.sidebar.button('Predict'):
    heart_dataset = pd.read_csv(filePath)
    heart_dataset = heart_dataset.drop(columns=['target'])
    df = pd.concat([input_df, heart_dataset], axis=0)
    df_encoded = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])
    input_encoded = df_encoded[:1]
    input_encoded.columns = input_encoded.columns.str.split('.').str[0]

    prediction = load_clf.predict(input_encoded)
    prediction_proba = load_clf.predict_proba(input_encoded)
    prediction_proba_percent = ['Ada penyakit Jantung: {:.1f}%'.format(prob * 100) if prob >= 0.5 else 'Tidak ada penyakit jantung: {:.1f}%'.format(prob * 100) for prob in prediction_proba[0]]
    prediction_proba_percent = ', '.join(prediction_proba_percent)

    st.subheader('Prediction')
    if prediction == [0]:
        st.write("Tidak Ada Penyakit Jantung")
    else:
        st.write("Ada Penyakit Jantung")
    st.write(prediction)

    st.subheader('Prediksi Terkena penyakit Jantung')
    st.write(prediction_proba_percent)
    st.write("0: Tidak Ada Penyakit Jantung, 1: Ada Penyakit Jantung")
