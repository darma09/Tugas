# -*- coding: utf-8 -*-
"""blabla.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbLePIPA6J3vFkAxR32j69SHYuTGzMot
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.linear_model import SGDClassifier
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import pickle
import streamlit as st

filePath = 'https://raw.githubusercontent.com/darma09/Tugas/main/heart.csv'
data = pd.read_csv(filePath)

data = pd.get_dummies(data, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])

y = data['target']
X = data.drop('target', axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

forest = RandomForestClassifier(n_estimators=20, random_state=12, max_depth=6)
forest.fit(X_train, y_train)

pickle.dump(forest, open('Random_forest_model.pkl', 'wb'))
with open('Random_forest_model.pkl', 'rb') as file:
    load_clf = pickle.load(file)

st.write("""
# Heart Disease Prediction App
Darma Alif Rakhaa
This app predicts if a patient has a heart disease.

Information:
1. Masukan umur kalian (Enter your age)
2. Jenis kelamin kalian (0: laki-laki, 1: perempuan) (Enter your gender: 0 for male, 1 for female)
3. Jenis nyeri dada (0: angina tipikal, 1: angina atipikal, 2: nyeri non-angina, 3: tanpa gejala) (Enter chest pain type: 0 for typical angina, 1 for atypical angina, 2 for non-anginal pain, 3 for asymptomatic)
4. Tekanan darah istirahat (Enter resting blood pressure)
5. Kolesterol serum dalam mg/dl (Enter serum cholestoral in mg/dl)
6. Gula darah puasa > 120 mg/dl (1: true, 0: false) (Enter fasting blood sugar: 1 for true, 0 for false)
7. Gula darah sehingga hasil elektrokardiografi istirahat > 90 mg/dl (1: normal, 0: abnormal) (Enter resting electrocardiographic results: 1 for normal, 0 for abnormal)
8. EKG epidimiokardiografi maksimum yang dicapai adalah â‰¥ 50% QRS normal (1: ya, 0: tidak) (Enter maximum heart rate achieved: 1 for yes, 0 for no)
NOTE : HASIL INI MASIH BELUM PASTI PERLU KONSULTASI LEBIH LANJUT DENGAN DOKTER
""")

st.sidebar.header('User Input Features')

def user_input_features():
    age = st.sidebar.number_input('Masukan umur: ')
    sex = st.sidebar.selectbox('Gender', (0, 1))
    cp = st.sidebar.selectbox('Chest pain type', (0, 1, 2, 3))
    tres = st.sidebar.number_input('Resting blood pressure: ')
    chol = st.sidebar.number_input('Serum cholestoral in mg/dl: ')
    fbs = st.sidebar.selectbox('Fasting blood sugar', (0, 1))
    res = st.sidebar.number_input('Resting electrocardiographic results: ', 0, 1)
    tha = st.sidebar.number_input('Maximum heart rate achieved: ')
    exa = st.sidebar.selectbox('Exercise induced angina: ', (0, 1))
    old = st.sidebar.number_input('Oldpeak: ')
    slope = st.sidebar.number_input('The slope of the peak exercise ST segment: ', 0, 2)
    ca = st.sidebar.selectbox('Number of major vessels', (0, 1, 2, 3))
    thal = st.sidebar.selectbox('Thal', (0, 1, 2, 3))

    data = {'age': age,
            'sex': sex,
            'cp': cp,
            'trestbps': tres,
            'chol': chol,
            'fbs': fbs,
            'restecg': res,
            'thalach': tha,
            'exang': exa,
            'oldpeak': old,
            'slope': slope,
            'ca': ca,
            'thal': thal}
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

if st.sidebar.button('Predict'):
    heart_dataset = pd.read_csv(filePath)
    heart_dataset = heart_dataset.drop(columns=['target'])
    df = pd.concat([input_df, heart_dataset], axis=0)
    df_encoded = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])
    input_encoded = df_encoded[:1]
    input_encoded.columns = input_encoded.columns.str.split('.').str[0]

    prediction = load_clf.predict(input_encoded)
    prediction_proba = load_clf.predict_proba(input_encoded)
    prediction_proba_percent = ['Ada penyakit Jantung: {:.2f}%'.format(prob * 100) if prob >= 0.5 else 'Tidak ada penyakit jantung: {:.2f}%'.format(prob * 100) for prob in prediction_proba[0]]
    prediction_proba_percent = ', '.join(prediction_proba_percent)

    st.subheader('Prediction')
    if prediction == [0]:
        st.write("Tidak Ada Penyakit Jantung")
    else:
        st.write("Ada Penyakit Jantung")
    st.write(prediction)

    st.subheader('Prediksi Terkena penyakit Jantung')
    st.write(prediction_proba_percent)
    st.write("0: Tidak Ada Penyakit Jantung, 1: Ada Penyakit Jantung")
